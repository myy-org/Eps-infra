AWSTemplateFormatVersion: '2010-09-09'
Description: API Gateway + Private S3 Integration with Dynamic Stage Deployment

Parameters:
  S3BucketName:
    Type: String
    Description: Name of the private S3 bucket containing frontend files (e.g., my-private-site)
  StageName:
    Type: String
    Default: prod
    AllowedPattern: '^[a-zA-Z0-9_-]+$'
    Description: Deployment stage name for the API (e.g., dev, prod, staging)

Resources:

  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ApiGatewayS3AccessRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3GetObjectPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${S3BucketName}/*

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub FrontendApi
      BinaryMediaTypes:
        - '*/*'

  # GET / → index.html
  RootGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/${S3BucketName}/index.html
        Credentials: !GetAtt S3AccessRole.Arn
        ContentHandling: CONVERT_TO_BINARY
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true

  # /{proxy+} → other static assets
  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref ApiGatewayRestApi

  ProxyGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS
        IntegrationHttpMethod: GET
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:s3:path/${S3BucketName}/{proxy}
        Credentials: !GetAtt S3AccessRole.Arn
        ContentHandling: CONVERT_TO_BINARY
        PassthroughBehavior: WHEN_NO_MATCH
        RequestParameters:
          integration.request.path.proxy: method.request.path.proxy
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Content-Type: true

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - RootGetMethod
      - ProxyGetMethod
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      StageName: !Ref StageName

Outputs:
  ApiEndpoint:
    Description: API Gateway URL for root path (serves index.html)
    Value: !Sub "https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
